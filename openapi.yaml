openapi: 3.1.0
info:
  title: Docker VPS Manager API
  description: |
    API for managing Docker containers on a remote VPS through natural language commands.

    This API enables ChatGPT to help users:
    - Create and manage Docker containers
    - Monitor container status and logs
    - Execute commands within containers
  version: 1.0.0

servers:
  - url: https://chat.toowired.solutions/api
    description: Docker Manager API server

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-Key
      description: API key for authentication

  schemas:
    Container:
      type: object
      properties:
        id:
          type: string
          description: Container ID
        name:
          type: string
          description: Container name
        image:
          type: string
          description: Image name
        status:
          type: string
          description: Container status
        ports:
          type: array
          items:
            type: string
          description: Port mappings
        created:
          type: string
          format: date-time
          description: Creation timestamp

    Error:
      type: object
      properties:
        code:
          type: string
          description: Error code
        message:
          type: string
          description: Error message details

    User:
      type: object
      properties:
        email:
          type: string
          description: User email
        password:
          type: string
          description: User password
        name:
          type: string
          description: User name

    Token:
      type: object
      properties:
        token:
          type: string
          description: JWT token

    SystemStatus:
      type: object
      properties:
        uptime:
          type: string
          description: System uptime
        memory:
          type: string
          description: Memory usage details
        disk:
          type: string
          description: Disk usage details
        load:
          type: string
          description: Load average details

    ServiceAction:
      type: object
      properties:
        name:
          type: string
          description: Service name
        action:
          type: string
          description: Action to perform (start/stop/restart)

    Command:
      type: object
      properties:
        command:
          type: string
          description: Command to execute

    Log:
      type: object
      properties:
        logs:
          type: array
          items:
            type: string
          description: Log entries

security:
  - ApiKeyAuth: []

paths:
  /containers:
    get:
      operationId: listContainers
      summary: List all containers
      description: Returns a list of all Docker containers
      parameters:
        - name: all
          in: query
          description: Show all containers (including stopped ones)
          required: false
          schema:
            type: boolean
      responses:
        '200':
          description: List of containers
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Container'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

    post:
      operationId: createContainer
      summary: Create and start a new container
      description: Creates a new Docker container from the specified image
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - image
              properties:
                image:
                  type: string
                  description: Docker image name
                name:
                  type: string
                  description: Container name
                ports:
                  type: array
                  items:
                    type: string
                  description: Port mappings
                env:
                  type: array
                  items:
                    type: string
                  description: Environment variables
              example:
                image: nginx:latest
                name: web-server
                ports:
                  - "80:80"
                env:
                  - "NGINX_HOST=example.com"
      responses:
        '201':
          description: Container created
          content:
            application/json:
              schema:
                type: object
                properties:
                  containerId:
                    type: string
                    description: ID of created container

  /containers/{id}:
    delete:
      operationId: removeContainer
      summary: Remove a container
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Container ID or name
        - in: query
          name: force
          schema:
            type: boolean
          required: false
          description: Force remove running container
      responses:
        '200':
          description: Container removed
        '404':
          description: Container not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /containers/{id}/start:
    post:
      operationId: startContainer
      summary: Start a container
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Container ID or name
      responses:
        '200':
          description: Container started
        '404':
          description: Container not found

  /containers/{id}/stop:
    post:
      operationId: stopContainer
      summary: Stop a container
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Container ID or name
      responses:
        '200':
          description: Container stopped
        '404':
          description: Container not found

  /containers/{id}/logs:
    get:
      operationId: getContainerLogs
      summary: Get container logs
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Container ID or name
        - in: query
          name: tail
          schema:
            type: integer
            minimum: 1
          required: false
          description: Number of lines to show from the end
      responses:
        '200':
          description: Container logs
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Container not found

  /containers/{id}/exec:
    post:
      operationId: execInContainer
      summary: Execute a command in a container
      parameters:
        - in: path
          name: id
          schema:
            type: string
          required: true
          description: Container ID or name
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - command
              properties:
                command:
                  type: string
                  description: Command to execute
              example:
                command: "ls -la /app"
      responses:
        '200':
          description: Command output
          content:
            text/plain:
              schema:
                type: string
        '404':
          description: Container not found

  /register:
    post:
      operationId: registerUser
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /login:
    post:
      operationId: loginUser
      summary: User login
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
      responses:
        '200':
          description: User logged in successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Authentication error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /system/status:
    get:
      operationId: getSystemStatus
      summary: Get system status
      responses:
        '200':
          description: System status retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemStatus'

  /system/service:
    post:
      operationId: manageSystemService
      summary: Manage system service
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ServiceAction'
      responses:
        '200':
          description: Service managed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the action
                  output:
                    type: string
                    description: Output of the action
                  error:
                    type: string
                    description: Error if any

  /logs/system:
    get:
      operationId: getSystemLogs
      summary: Get system logs
      responses:
        '200':
          description: System logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'

  /logs/application/{name}:
    get:
      operationId: getApplicationLogs
      summary: Get application logs
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Application name
      responses:
        '200':
          description: Application logs retrieved successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'

  /command/execute:
    post:
      operationId: executeCommand
      summary: Execute a command
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Command'
      responses:
        '200':
          description: Command executed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the command
                  output:
                    type: string
                    description: Output of the command
                  error:
                    type: string
                    description: Error if any
                  code:
                    type: integer
                    description: Exit code of the command

  /docker/containers:
    get:
      operationId: listDockerContainers
      summary: List Docker containers
      responses:
        '200':
          description: Docker containers listed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the request
                  containers:
                    type: string
                    description: List of containers

  /docker/container/{action}:
    post:
      operationId: dockerContainerAction
      summary: Perform action on Docker container
      parameters:
        - in: path
          name: action
          schema:
            type: string
          required: true
          description: Action to perform (start/stop/restart/remove)
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                containerId:
                  type: string
                  description: ID of the container
      responses:
        '200':
          description: Action performed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: Status of the action
                  output:
                    type: string
                    description: Output of the action
                  error:
                    type: string
                    description: Error if any
